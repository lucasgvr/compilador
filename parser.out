Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    EQ
    GE
    GT
    LE
    LT
    NEQ
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> empty
Rule 4     statement -> assignment
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     assignment -> ID ASSIGN expression SEMICOLON
Rule 8     if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
Rule 9     else_block -> ELSE SCOPE statements SCOPE
Rule 10    else_block -> empty
Rule 11    while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE
Rule 12    expression -> expression PLUS term
Rule 13    expression -> expression MINUS term
Rule 14    expression -> term
Rule 15    term -> term TIMES factor
Rule 16    term -> term DIVIDE factor
Rule 17    term -> factor
Rule 18    factor -> INT
Rule 19    factor -> BOOL
Rule 20    factor -> ID
Rule 21    factor -> LPAREN expression RPAREN
Rule 22    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 7
BOOL                 : 19
DIVIDE               : 16
ELSE                 : 9
EQ                   : 
GE                   : 
GT                   : 
ID                   : 7 20
IF                   : 8
INT                  : 18
LE                   : 
LPAREN               : 8 11 21
LT                   : 
MINUS                : 13
NEQ                  : 
OR                   : 
PLUS                 : 12
RPAREN               : 8 11 21
SCOPE                : 8 8 9 9 11 11
SEMICOLON            : 7
TIMES                : 15
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

assignment           : 4
else_block           : 8
empty                : 3 10
expression           : 7 8 11 12 13 21
factor               : 15 16 17
if_statement         : 5
program              : 0
statement            : 2
statements           : 1 2 8 9 11
term                 : 12 13 14 15 16
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement statements
    (3) statements -> . empty
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (22) empty -> .
    (7) assignment -> . ID ASSIGN expression SEMICOLON
    (8) if_statement -> . IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
    (11) while_statement -> . WHILE LPAREN expression RPAREN SCOPE statements SCOPE

    $end            reduce using rule 22 (empty -> .)
    ID              shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . statements
    (2) statements -> . statement statements
    (3) statements -> . empty
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (22) empty -> .
    (7) assignment -> . ID ASSIGN expression SEMICOLON
    (8) if_statement -> . IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
    (11) while_statement -> . WHILE LPAREN expression RPAREN SCOPE statements SCOPE

    $end            reduce using rule 22 (empty -> .)
    SCOPE           reduce using rule 22 (empty -> .)
    ID              shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10

    statement                      shift and go to state 3
    statements                     shift and go to state 11
    empty                          shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7

state 4

    (3) statements -> empty .

    $end            reduce using rule 3 (statements -> empty .)
    SCOPE           reduce using rule 3 (statements -> empty .)


state 5

    (4) statement -> assignment .

    ID              reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    SCOPE           reduce using rule 4 (statement -> assignment .)


state 6

    (5) statement -> if_statement .

    ID              reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    SCOPE           reduce using rule 5 (statement -> if_statement .)


state 7

    (6) statement -> while_statement .

    ID              reduce using rule 6 (statement -> while_statement .)
    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    SCOPE           reduce using rule 6 (statement -> while_statement .)


state 8

    (7) assignment -> ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 12


state 9

    (8) if_statement -> IF . LPAREN expression RPAREN SCOPE statements SCOPE else_block

    LPAREN          shift and go to state 13


state 10

    (11) while_statement -> WHILE . LPAREN expression RPAREN SCOPE statements SCOPE

    LPAREN          shift and go to state 14


state 11

    (2) statements -> statement statements .

    $end            reduce using rule 2 (statements -> statement statements .)
    SCOPE           reduce using rule 2 (statements -> statement statements .)


state 12

    (7) assignment -> ID ASSIGN . expression SEMICOLON
    (12) expression -> . expression PLUS term
    (13) expression -> . expression MINUS term
    (14) expression -> . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 13

    (8) if_statement -> IF LPAREN . expression RPAREN SCOPE statements SCOPE else_block
    (12) expression -> . expression PLUS term
    (13) expression -> . expression MINUS term
    (14) expression -> . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    expression                     shift and go to state 22
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 14

    (11) while_statement -> WHILE LPAREN . expression RPAREN SCOPE statements SCOPE
    (12) expression -> . expression PLUS term
    (13) expression -> . expression MINUS term
    (14) expression -> . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    expression                     shift and go to state 23
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 15

    (20) factor -> ID .

    TIMES           reduce using rule 20 (factor -> ID .)
    DIVIDE          reduce using rule 20 (factor -> ID .)
    SEMICOLON       reduce using rule 20 (factor -> ID .)
    PLUS            reduce using rule 20 (factor -> ID .)
    MINUS           reduce using rule 20 (factor -> ID .)
    RPAREN          reduce using rule 20 (factor -> ID .)


state 16

    (7) assignment -> ID ASSIGN expression . SEMICOLON
    (12) expression -> expression . PLUS term
    (13) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26


state 17

    (14) expression -> term .
    (15) term -> term . TIMES factor
    (16) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 14 (expression -> term .)
    PLUS            reduce using rule 14 (expression -> term .)
    MINUS           reduce using rule 14 (expression -> term .)
    RPAREN          reduce using rule 14 (expression -> term .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28


state 18

    (17) term -> factor .

    TIMES           reduce using rule 17 (term -> factor .)
    DIVIDE          reduce using rule 17 (term -> factor .)
    SEMICOLON       reduce using rule 17 (term -> factor .)
    PLUS            reduce using rule 17 (term -> factor .)
    MINUS           reduce using rule 17 (term -> factor .)
    RPAREN          reduce using rule 17 (term -> factor .)


state 19

    (18) factor -> INT .

    TIMES           reduce using rule 18 (factor -> INT .)
    DIVIDE          reduce using rule 18 (factor -> INT .)
    SEMICOLON       reduce using rule 18 (factor -> INT .)
    PLUS            reduce using rule 18 (factor -> INT .)
    MINUS           reduce using rule 18 (factor -> INT .)
    RPAREN          reduce using rule 18 (factor -> INT .)


state 20

    (19) factor -> BOOL .

    TIMES           reduce using rule 19 (factor -> BOOL .)
    DIVIDE          reduce using rule 19 (factor -> BOOL .)
    SEMICOLON       reduce using rule 19 (factor -> BOOL .)
    PLUS            reduce using rule 19 (factor -> BOOL .)
    MINUS           reduce using rule 19 (factor -> BOOL .)
    RPAREN          reduce using rule 19 (factor -> BOOL .)


state 21

    (21) factor -> LPAREN . expression RPAREN
    (12) expression -> . expression PLUS term
    (13) expression -> . expression MINUS term
    (14) expression -> . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    expression                     shift and go to state 29
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 22

    (8) if_statement -> IF LPAREN expression . RPAREN SCOPE statements SCOPE else_block
    (12) expression -> expression . PLUS term
    (13) expression -> expression . MINUS term

    RPAREN          shift and go to state 30
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26


state 23

    (11) while_statement -> WHILE LPAREN expression . RPAREN SCOPE statements SCOPE
    (12) expression -> expression . PLUS term
    (13) expression -> expression . MINUS term

    RPAREN          shift and go to state 31
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26


state 24

    (7) assignment -> ID ASSIGN expression SEMICOLON .

    ID              reduce using rule 7 (assignment -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 7 (assignment -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 7 (assignment -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 7 (assignment -> ID ASSIGN expression SEMICOLON .)
    SCOPE           reduce using rule 7 (assignment -> ID ASSIGN expression SEMICOLON .)


state 25

    (12) expression -> expression PLUS . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    term                           shift and go to state 32
    factor                         shift and go to state 18

state 26

    (13) expression -> expression MINUS . term
    (15) term -> . term TIMES factor
    (16) term -> . term DIVIDE factor
    (17) term -> . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    term                           shift and go to state 33
    factor                         shift and go to state 18

state 27

    (15) term -> term TIMES . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    factor                         shift and go to state 34

state 28

    (16) term -> term DIVIDE . factor
    (18) factor -> . INT
    (19) factor -> . BOOL
    (20) factor -> . ID
    (21) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 19
    BOOL            shift and go to state 20
    ID              shift and go to state 15
    LPAREN          shift and go to state 21

    factor                         shift and go to state 35

state 29

    (21) factor -> LPAREN expression . RPAREN
    (12) expression -> expression . PLUS term
    (13) expression -> expression . MINUS term

    RPAREN          shift and go to state 36
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26


state 30

    (8) if_statement -> IF LPAREN expression RPAREN . SCOPE statements SCOPE else_block

    SCOPE           shift and go to state 37


state 31

    (11) while_statement -> WHILE LPAREN expression RPAREN . SCOPE statements SCOPE

    SCOPE           shift and go to state 38


state 32

    (12) expression -> expression PLUS term .
    (15) term -> term . TIMES factor
    (16) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 12 (expression -> expression PLUS term .)
    PLUS            reduce using rule 12 (expression -> expression PLUS term .)
    MINUS           reduce using rule 12 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 12 (expression -> expression PLUS term .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28


state 33

    (13) expression -> expression MINUS term .
    (15) term -> term . TIMES factor
    (16) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 13 (expression -> expression MINUS term .)
    PLUS            reduce using rule 13 (expression -> expression MINUS term .)
    MINUS           reduce using rule 13 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 13 (expression -> expression MINUS term .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28


state 34

    (15) term -> term TIMES factor .

    TIMES           reduce using rule 15 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 15 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 15 (term -> term TIMES factor .)
    PLUS            reduce using rule 15 (term -> term TIMES factor .)
    MINUS           reduce using rule 15 (term -> term TIMES factor .)
    RPAREN          reduce using rule 15 (term -> term TIMES factor .)


state 35

    (16) term -> term DIVIDE factor .

    TIMES           reduce using rule 16 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 16 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 16 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 16 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 16 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 16 (term -> term DIVIDE factor .)


state 36

    (21) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 21 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (factor -> LPAREN expression RPAREN .)


state 37

    (8) if_statement -> IF LPAREN expression RPAREN SCOPE . statements SCOPE else_block
    (2) statements -> . statement statements
    (3) statements -> . empty
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (22) empty -> .
    (7) assignment -> . ID ASSIGN expression SEMICOLON
    (8) if_statement -> . IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
    (11) while_statement -> . WHILE LPAREN expression RPAREN SCOPE statements SCOPE

    SCOPE           reduce using rule 22 (empty -> .)
    ID              shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10

    statements                     shift and go to state 39
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7

state 38

    (11) while_statement -> WHILE LPAREN expression RPAREN SCOPE . statements SCOPE
    (2) statements -> . statement statements
    (3) statements -> . empty
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (22) empty -> .
    (7) assignment -> . ID ASSIGN expression SEMICOLON
    (8) if_statement -> . IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
    (11) while_statement -> . WHILE LPAREN expression RPAREN SCOPE statements SCOPE

    SCOPE           reduce using rule 22 (empty -> .)
    ID              shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10

    statements                     shift and go to state 40
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7

state 39

    (8) if_statement -> IF LPAREN expression RPAREN SCOPE statements . SCOPE else_block

    SCOPE           shift and go to state 41


state 40

    (11) while_statement -> WHILE LPAREN expression RPAREN SCOPE statements . SCOPE

    SCOPE           shift and go to state 42


state 41

    (8) if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE . else_block
    (9) else_block -> . ELSE SCOPE statements SCOPE
    (10) else_block -> . empty
    (22) empty -> .

    ELSE            shift and go to state 44
    ID              reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    SCOPE           reduce using rule 22 (empty -> .)

    else_block                     shift and go to state 43
    empty                          shift and go to state 45

state 42

    (11) while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .

    ID              reduce using rule 11 (while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .)
    IF              reduce using rule 11 (while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .)
    WHILE           reduce using rule 11 (while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .)
    $end            reduce using rule 11 (while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .)
    SCOPE           reduce using rule 11 (while_statement -> WHILE LPAREN expression RPAREN SCOPE statements SCOPE .)


state 43

    (8) if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .

    ID              reduce using rule 8 (if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .)
    IF              reduce using rule 8 (if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .)
    WHILE           reduce using rule 8 (if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .)
    $end            reduce using rule 8 (if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .)
    SCOPE           reduce using rule 8 (if_statement -> IF LPAREN expression RPAREN SCOPE statements SCOPE else_block .)


state 44

    (9) else_block -> ELSE . SCOPE statements SCOPE

    SCOPE           shift and go to state 46


state 45

    (10) else_block -> empty .

    ID              reduce using rule 10 (else_block -> empty .)
    IF              reduce using rule 10 (else_block -> empty .)
    WHILE           reduce using rule 10 (else_block -> empty .)
    $end            reduce using rule 10 (else_block -> empty .)
    SCOPE           reduce using rule 10 (else_block -> empty .)


state 46

    (9) else_block -> ELSE SCOPE . statements SCOPE
    (2) statements -> . statement statements
    (3) statements -> . empty
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (22) empty -> .
    (7) assignment -> . ID ASSIGN expression SEMICOLON
    (8) if_statement -> . IF LPAREN expression RPAREN SCOPE statements SCOPE else_block
    (11) while_statement -> . WHILE LPAREN expression RPAREN SCOPE statements SCOPE

    SCOPE           reduce using rule 22 (empty -> .)
    ID              shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10

    statements                     shift and go to state 47
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7

state 47

    (9) else_block -> ELSE SCOPE statements . SCOPE

    SCOPE           shift and go to state 48


state 48

    (9) else_block -> ELSE SCOPE statements SCOPE .

    ID              reduce using rule 9 (else_block -> ELSE SCOPE statements SCOPE .)
    IF              reduce using rule 9 (else_block -> ELSE SCOPE statements SCOPE .)
    WHILE           reduce using rule 9 (else_block -> ELSE SCOPE statements SCOPE .)
    $end            reduce using rule 9 (else_block -> ELSE SCOPE statements SCOPE .)
    SCOPE           reduce using rule 9 (else_block -> ELSE SCOPE statements SCOPE .)

